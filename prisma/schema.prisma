// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SearchQuery {
  id    Int   @id @default(autoincrement())
  query String @unique
  count Int @default(0)
  searchHistory UserSearchHistory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[] 
  searchHistory UserSearchHistory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSearchHistory {
  userId String
  user User @relation(fields: [userId], references: [id])
  searchQueryId Int
  searchQuery SearchQuery @relation(fields: [searchQueryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  count Int @default(1)
  @@id([userId, searchQueryId])
}


model Post {
  id    Int   @id @default(autoincrement())
  title String 
  content String 
  SocialMediaId Int
  SocialMedia SocialMedia @relation(fields: [SocialMediaId], references: [id])
  url String
  upvotes Int @default(0)
  downvotes Int @default(0)
  views Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SocialMedia {
  id    Int   @id @default(autoincrement())
  name  String
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  posts Post[]
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 